# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    environment:
      CUDNN_VERSION: "8.2.1"
      TRT_VERSION: "8.2.4"
      TRT_VERSION_LONG: "8.2.4.2"
      BAZEL_VERSION: "5.1.1"
      CUDNN_PKG_NAME: "8.2.1.*-1+cuda11.3"
      TRT_PKG_NAME: "8.2.4-1+cuda11.4"
      TORCH_BUILD: "1.11.0+cu113"
      OS: "ubuntu2004"
    machine:
    # Primary container image where all steps run.
      # image: nvcr.io/nvidia/tensorrt:22.01-py3 # does not work with customized image
      # https://circleci.com/docs/2.0/configuration-reference#available-linux-gpu-images
      image: ubuntu-2004-cuda-11.4:202110-01
    resource_class: gpu.nvidia.large
    steps:
      - checkout
      - run:
          name: Install cudnn + tensorrt + bazel
          command: |
            cd ~

            wget https://developer.download.nvidia.com/compute/cuda/repos/${OS}/x86_64/cuda-${OS}.pin
            sudo mv cuda-${OS}.pin /etc/apt/preferences.d/cuda-repository-pin-600
            sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/${OS}/x86_64/7fa2af80.pub
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 536F8F1DE80F6A35
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC
            sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/${OS}/x86_64/ /"
            sudo apt-get update
            sudo apt-get install libcudnn8=${CUDNN_PKG_NAME}
            sudo apt-get install libcudnn8-dev=${CUDNN_PKG_NAME}

            sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/{OS}/x86_64/3bf863cc.pub
            sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/${OS}/x86_64/ /"
            sudo apt-get update

            sudo apt-get install libnvinfer8=${TRT_PKG_NAME} libnvinfer-plugin8=${TRT_PKG_NAME} libnvinfer-dev=${TRT_PKG_NAME} libnvinfer-plugin-dev=${TRT_PKG_NAME}
            # check available version, apt list libnvinfer8 -a
            sudo wget -q https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-linux-x86_64 -O /usr/bin/bazel
            sudo chmod a+x /usr/bin/bazel

      - run:
          name: Set up python environment
          command: |
            pip3 install --upgrade pip
            pip3 install nvidia-pyindex
            pip3 install tabulate
            pip3 install nvidia-tensorrt==${TRT_VERSION_LONG}
            #pip3 install --pre torch==${TORCH_BUILD}  torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cu113
            pip3 install torch==${TORCH_BUILD} torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113
            pip3 install pytest parameterized expecttest nox
            # install torch_tensorrt
            mv WORKSPACE.ci WORKSPACE
            cd py
            python3 setup.py install

            # install fx2trt
            # cd py/torch_tensorrt/fx/setup
            # python3 setup.py install

      - run:
          name: GPU Config
          command: |
            nvidia-smi

      - run:
          name: Test torch
          command: |
            python3 -c "import torch; print(torch.cuda.is_available()); print(torch.cuda.device_count())"

      - run:
          name: Pull test models
          environment:
            USE_HOST_DEPS: "1"
          command: |
            cd tests/modules
            pip3 install -r requirements.txt
            python3 hub.py
            cd ../..

      - run:
          name: Run core / C++ tests
          command: |
            bazel test //tests --jobs 2

      - run:
          name: Run L0 python tests
          command: |
            nox -s l0_api_tests

      - run:
          name: Run fx tests
          command: |
            # one fix pending to enable below
            # cd py/torch_tensorrt/fx/test
            # pytest $(find . -name '*.py' | grep -v test_dispatch* | grep -v test_setitem*)

            cd py/torch_tensorrt/fx/test
            pushd converters/acc_op
            pytest
            popd
            pushd passes
            list_passes=$(ls | grep -v test_setitem*)
            pytest $list_passes
            popd
            pushd core
            pytest
            popd
            # pushd quant
            # pytest
            # popd
            pushd tools
            pytest
            popd
            pushd trt_lower
            pytest
            popd
            pushd tracer
            list_tracer=$(ls | grep -v test_dispatch_*)
            pytest $list_tracer
            popd
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build_run:
    jobs:
      - build
